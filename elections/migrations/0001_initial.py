# Generated by Django 5.2.3 on 2025-06-23 23:24

import elections.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('father_name', models.CharField(max_length=200)),
                ('mother_name', models.CharField(blank=True, max_length=200)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=10)),
                ('is_independent', models.BooleanField(default=False)),
                ('candidate_number', models.IntegerField()),
                ('nomination_id', models.CharField(max_length=50, unique=True)),
                ('nomination_date', models.DateTimeField()),
                ('nomination_status', models.CharField(choices=[('FILED', 'Filed'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('WITHDRAWN', 'Withdrawn')], default='FILED', max_length=20)),
                ('education', models.CharField(blank=True, max_length=200)),
                ('profession', models.CharField(blank=True, max_length=200)),
                ('assets_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('criminal_cases', models.IntegerField(default=0)),
                ('address', models.TextField()),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('photo', models.ImageField(blank=True, upload_to='candidate_photos/')),
                ('symbol', models.CharField(blank=True, max_length=100)),
                ('symbol_image', models.ImageField(blank=True, upload_to='candidate_symbols/')),
                ('votes_received', models.IntegerField(default=0)),
                ('vote_percentage', models.FloatField(default=0.0)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('is_winner', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['candidate_number'],
            },
        ),
        migrations.CreateModel(
            name='CandidateVoteCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('votes_count', models.IntegerField()),
                ('vote_percentage', models.FloatField()),
                ('rank', models.IntegerField()),
                ('round_number', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-votes_count'],
            },
        ),
        migrations.CreateModel(
            name='Election',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('election_type', models.CharField(choices=[('LOK_SABHA', 'Lok Sabha General Election'), ('VIDHAN_SABHA', 'Vidhan Sabha Election'), ('RAJYA_SABHA', 'Rajya Sabha Election'), ('MUNICIPAL', 'Municipal Election'), ('PANCHAYAT', 'Panchayat Election'), ('BY_ELECTION', 'By-Election')], max_length=20)),
                ('election_id', models.CharField(max_length=50, unique=True)),
                ('announcement_date', models.DateTimeField()),
                ('nomination_start_date', models.DateTimeField()),
                ('nomination_end_date', models.DateTimeField()),
                ('voting_start_date', models.DateTimeField()),
                ('voting_end_date', models.DateTimeField()),
                ('result_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('ANNOUNCED', 'Announced'), ('NOMINATION_OPEN', 'Nomination Open'), ('NOMINATION_CLOSED', 'Nomination Closed'), ('VOTING_OPEN', 'Voting Open'), ('VOTING_CLOSED', 'Voting Closed'), ('COUNTING', 'Counting'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='ANNOUNCED', max_length=20)),
                ('allow_nota', models.BooleanField(default=True)),
                ('require_photo_id', models.BooleanField(default=True)),
                ('enable_face_verification', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-voting_start_date'],
            },
        ),
        migrations.CreateModel(
            name='ElectionAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('VOTE_CAST', 'Vote Cast'), ('VOTE_VERIFIED', 'Vote Verified'), ('RESULT_CALCULATED', 'Result Calculated'), ('ELECTION_STARTED', 'Election Started'), ('ELECTION_ENDED', 'Election Ended'), ('CANDIDATE_ADDED', 'Candidate Added'), ('VOTER_VERIFIED', 'Voter Verified')], max_length=30)),
                ('actor_type', models.CharField(max_length=50)),
                ('actor_id', models.CharField(max_length=255)),
                ('details', models.JSONField()),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ElectionConstituency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('polling_start_time', models.TimeField(default='07:00:00')),
                ('polling_end_time', models.TimeField(default='18:00:00')),
                ('total_votes_cast', models.IntegerField(default=0)),
                ('total_valid_votes', models.IntegerField(default=0)),
                ('total_invalid_votes', models.IntegerField(default=0)),
                ('voter_turnout_percentage', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ElectionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_voters', models.IntegerField()),
                ('total_votes_cast', models.IntegerField()),
                ('total_valid_votes', models.IntegerField()),
                ('total_invalid_votes', models.IntegerField()),
                ('nota_votes', models.IntegerField(default=0)),
                ('voter_turnout_percentage', models.FloatField()),
                ('winning_margin', models.IntegerField()),
                ('victory_margin_percentage', models.FloatField()),
                ('status', models.CharField(choices=[('COUNTING', 'Counting in Progress'), ('PROVISIONAL', 'Provisional Result'), ('FINAL', 'Final Result'), ('DISPUTED', 'Disputed')], default='COUNTING', max_length=20)),
                ('result_hash', models.CharField(max_length=64)),
                ('blockchain_verified', models.BooleanField(default=False)),
                ('counting_start_time', models.DateTimeField(blank=True, null=True)),
                ('result_declared_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-result_declared_time'],
            },
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('abbreviation', models.CharField(max_length=10, unique=True)),
                ('symbol', models.CharField(max_length=100)),
                ('symbol_image', models.ImageField(blank=True, upload_to='party_symbols/')),
                ('founded_date', models.DateField(blank=True, null=True)),
                ('headquarters', models.CharField(blank=True, max_length=200)),
                ('website', models.URLField(blank=True)),
                ('recognition_status', models.CharField(choices=[('NATIONAL', 'National Party'), ('STATE', 'State Party'), ('REGIONAL', 'Regional Party'), ('UNRECOGNIZED', 'Unrecognized')], max_length=20)),
                ('party_color', models.CharField(default='#000000', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Parties',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VoteReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('qr_code', models.ImageField(blank=True, upload_to='vote_receipts/')),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('verification_hash', models.CharField(max_length=256)),
                ('verification_token', models.CharField(default=elections.models.VoteReceipt.get_default_token, max_length=64)),
            ],
            options={
                'verbose_name': 'Vote Receipt',
                'verbose_name_plural': 'Vote Receipts',
            },
        ),
        migrations.CreateModel(
            name='VoteRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('transaction_hash', models.CharField(blank=True, max_length=128)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('vote_type', models.CharField(choices=[('CANDIDATE', 'Vote for Candidate'), ('NOTA', 'None of the Above'), ('ABSTAIN', 'Abstain from Voting')], default='CANDIDATE', max_length=20)),
                ('voter_hash', models.CharField(max_length=512)),
            ],
            options={
                'verbose_name': 'Vote Record',
                'verbose_name_plural': 'Vote Records',
            },
        ),
    ]
