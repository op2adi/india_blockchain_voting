# Generated by Django 5.2.3 on 2025-06-22 19:34

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Constituency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('constituency_type', models.CharField(choices=[('LOK_SABHA', 'Lok Sabha'), ('VIDHAN_SABHA', 'Vidhan Sabha'), ('RAJYA_SABHA', 'Rajya Sabha'), ('MUNICIPAL', 'Municipal')], max_length=20)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('area_boundaries', models.JSONField(blank=True, null=True)),
                ('total_voters', models.IntegerField(default=0)),
                ('reserved_category', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Constituencies',
                'ordering': ['state__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Voter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('voter_id', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Voter ID must be in format: ABC1234567', regex='^[A-Z]{3}\\d{7}$')])),
                ('encrypted_voter_card_number', models.TextField()),
                ('encrypted_aadhaar_number', models.TextField(blank=True)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=10)),
                ('address_line1', models.CharField(max_length=200)),
                ('address_line2', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('pincode', models.CharField(max_length=6, validators=[django.core.validators.RegexValidator(message='Pincode must be 6 digits', regex='^\\d{6}$')])),
                ('mobile_number', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Mobile number must be +91 followed by 10 digits', regex='^\\+91\\d{10}$')])),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('encrypted_face_encoding', models.TextField(blank=True)),
                ('encrypted_fingerprint_data', models.TextField(blank=True)),
                ('has_voted', models.BooleanField(default=False)),
                ('vote_count', models.IntegerField(default=0)),
                ('last_voted_at', models.DateTimeField(blank=True, null=True)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('encryption_key', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('login_attempts', models.IntegerField(default=0)),
                ('is_locked', models.BooleanField(default=False)),
                ('locked_until', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('constituency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voters', to='users.constituency')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.state')),
            ],
            options={
                'ordering': ['voter_id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('SUPER_ADMIN', 'Super Admin'), ('ELECTION_COMMISSIONER', 'Election Commissioner'), ('CONSTITUENCY_ADMIN', 'Constituency Admin'), ('TECHNICAL_ADMIN', 'Technical Admin'), ('AUDIT_ADMIN', 'Audit Admin')], max_length=30)),
                ('can_create_elections', models.BooleanField(default=False)),
                ('can_manage_voters', models.BooleanField(default=False)),
                ('can_view_results', models.BooleanField(default=False)),
                ('can_audit_blockchain', models.BooleanField(default=False)),
                ('can_manage_constituencies', models.BooleanField(default=False)),
                ('public_key', models.TextField()),
                ('private_key_encrypted', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('assigned_constituencies', models.ManyToManyField(blank=True, to='users.constituency')),
            ],
            options={
                'ordering': ['role', 'user__voter_id'],
            },
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('success', models.BooleanField()),
                ('failure_reason', models.CharField(blank=True, max_length=100)),
                ('location_data', models.JSONField(blank=True, null=True)),
                ('used_2fa', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_attempts_log', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='constituency',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='constituencies', to='users.state'),
        ),
        migrations.CreateModel(
            name='VoterSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('device_fingerprint', models.CharField(max_length=64)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField()),
                ('is_suspicious', models.BooleanField(default=False)),
                ('security_score', models.FloatField(default=100.0)),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VoterVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verification_type', models.CharField(choices=[('AADHAAR', 'Aadhaar Verification'), ('FACE', 'Face Recognition'), ('FINGERPRINT', 'Fingerprint'), ('OTP', 'OTP Verification'), ('MANUAL', 'Manual Verification')], max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('VERIFIED', 'Verified'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20)),
                ('verification_data', models.JSONField()),
                ('verification_score', models.FloatField(default=0.0)),
                ('verification_ip', models.GenericIPAddressField()),
                ('verification_timestamp', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.adminuser')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-verification_timestamp'],
                'unique_together': {('voter', 'verification_type', 'verification_timestamp')},
            },
        ),
    ]
